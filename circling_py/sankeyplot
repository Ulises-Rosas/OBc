#!/usr/bin/env python3

# -*- coding: utf-8 -*- #

import argparse
import subprocess
from circling_py.OBc import *

def getOpt():

    parser = argparse.ArgumentParser(description="Sankey plot from OBc pipeline")

    parser.add_argument('-b','--bold',
                        metavar='str',
                        help='[Required] bold file',
                        required=True)
    parser.add_argument('-o', '--obis',
                        metavar='str',
                        help='[Required] obis file',
                        required=True)
    parser.add_argument('-g', '--group',
                        metavar="str",
                        type=str,
                        default="group",
                        help='[Optional] Grouping column from obis file [Default = group]')
    parser.add_argument('-q', '--quiet',
                        action='store_false',
                        help='[Optional] If selected, suppress running messages')
    parser.add_argument('-R',
                        metavar="str",
                        type=str,
                        default=None,
                        help='[Optional] Sort region by an specific string in CSV format (e.g. "value1,value2,value3") [Default = None]')
    parser.add_argument('-G',
                        metavar="str",
                        type=str,
                        default=None,
                        help='[Optional] Sort group by an specific string in CSV format (e.g. "value1,value2,value3") [Default = None]')
    parser.add_argument('-p', '--pal',
                        metavar='str',
                        type=str,
                        default='RdYlBu',
                        help='[Optional] Palette of colors [Default = RdYlBu]')


    args = parser.parse_args()
    return args

def runShell(args):
    p = subprocess.Popen(args)
    p.communicate()

def cname(s):
    """
    :param s: check line 138 of `plot_bars.R`
    :return:
    """
    tail = "_SankeyPlot.jpeg"
    try:
        return s.split(".")[-2].split("/")[-1] + tail
    except IndexError:
        return s.split("/")[-1] + tail

def main():

    options = vars(getOpt())

    # print(options)

    OBclass = OBc()
    out = OBclass.SankeyData(
                bold       = options['bold' ],
                obis       = options['obis' ],
                group      = options['group'],
                debug      = options['quiet'],
                groupsort  = options['G'] if options['G'] is None else options['G'].split(","),
                regionsort = options['R'] if options['R'] is None else options['R'].split(",")
                )

    out_file = OBclass.writeOut(out = out)

    print(out_file)

if __name__ == "__main__":
    main()
